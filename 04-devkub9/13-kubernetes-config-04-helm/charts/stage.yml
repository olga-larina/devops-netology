---
# Source: myapp/templates/postgres_pv.yml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-data-volume
spec:
  accessModes:
  - ReadWriteOnce
  capacity:
    storage: 1Gi
  hostPath:
    path: /var/lib/postgresql
---
# Source: myapp/templates/postgres_service.yml
apiVersion: v1
kind: Service
metadata:
  name: postgres-headless-svc
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: postgresql
      port: 5432
      targetPort: 5432
      protocol: TCP
  selector:
    app: postgres
---
# Source: myapp/templates/stage_fullstack_service.yml
apiVersion: v1
kind: Service
metadata:
  name: fullstack
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      nodePort: 32183
  selector:
    app: fullstack
  type: NodePort
---
# Source: myapp/templates/stage_fullstack.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: fullstack
  name: fullstack
spec:
  replicas: 1
  selector:
    matchLabels:
      app: fullstack
  template:
    metadata:
      labels:
        app: fullstack
    spec:
      containers:
        - image: "anguisa/backend:latest"
          imagePullPolicy: IfNotPresent
          name: backend
          env:
            - name: DATABASE_URL
              value: "postgresql://postgres:postgres@postgres-headless-svc/news"
          volumeMounts:
            - mountPath: "/static-back"
              name: stage-volume
        - image: "anguisa/frontend:latest"
          imagePullPolicy: IfNotPresent
          name: frontend
          env:
            - name: BACKEND_HOST
              value: backend:9000
            - name: NGINX_ENVSUBST_TEMPLATE_SUFFIX
              value: ".conf"
          volumeMounts:
            - mountPath: "/static-front"
              name: stage-volume
      initContainers:
        - name: init-backend
          image: busybox:1.28
          command: [ 'sh', '-c', "until nslookup postgres-headless-svc; do echo waiting for postgres-headless-svc; sleep 2; done" ]
      terminationGracePeriodSeconds: 30
      volumes:
        - name: stage-volume
          emptyDir: {}
---
# Source: myapp/templates/postgres_sts.yml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-sts
spec:
  serviceName: postgres-headless-svc
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgresql
          image: "postgres:13-alpine"
          imagePullPolicy: IfNotPresent
          env:
            - name: POSTGRES_PASSWORD
              value: postgres
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_DB
              value: news
            - name: PGDATA
              value: "/var/lib/postgresql/data"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/var/lib/postgresql"
          ports:
            - name: postgresql
              containerPort: 5432
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - bash
                - -ec
                - 'PGPASSWORD=$POSTGRES_PASSWORD psql -w -U "postgres" -d "postgres"  -h 127.0.0.1 -c "SELECT 1"'
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - bash
                - -ec
                - 'PGPASSWORD=$POSTGRES_PASSWORD psql -w -U "postgres" -d "postgres"  -h 127.0.0.1 -c "SELECT 1"'
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: postgres-data-volume
              mountPath: /var/lib/postgresql
  volumeClaimTemplates:
    - metadata:
        name: postgres-data-volume
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "1Gi"
